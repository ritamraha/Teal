# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mathsat
else:
    import _mathsat

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class msat_config(object):
    r"""Proxy of C msat_config struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_config_repr_get, _mathsat.msat_config_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_config self) -> msat_config"""
        _mathsat.msat_config_swiginit(self, _mathsat.new_msat_config())
    __swig_destroy__ = _mathsat.delete_msat_config

# Register msat_config in _mathsat:
_mathsat.msat_config_swigregister(msat_config)

class msat_env(object):
    r"""Proxy of C msat_env struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_env_repr_get, _mathsat.msat_env_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_env self) -> msat_env"""
        _mathsat.msat_env_swiginit(self, _mathsat.new_msat_env())
    __swig_destroy__ = _mathsat.delete_msat_env

# Register msat_env in _mathsat:
_mathsat.msat_env_swigregister(msat_env)

class msat_term(object):
    r"""Proxy of C msat_term struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_term_repr_get, _mathsat.msat_term_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_term self) -> msat_term"""
        _mathsat.msat_term_swiginit(self, _mathsat.new_msat_term())
    __swig_destroy__ = _mathsat.delete_msat_term

# Register msat_term in _mathsat:
_mathsat.msat_term_swigregister(msat_term)

class msat_decl(object):
    r"""Proxy of C msat_decl struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_decl_repr_get, _mathsat.msat_decl_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_decl self) -> msat_decl"""
        _mathsat.msat_decl_swiginit(self, _mathsat.new_msat_decl())
    __swig_destroy__ = _mathsat.delete_msat_decl

# Register msat_decl in _mathsat:
_mathsat.msat_decl_swigregister(msat_decl)

class msat_type(object):
    r"""Proxy of C msat_type struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_type_repr_get, _mathsat.msat_type_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_type self) -> msat_type"""
        _mathsat.msat_type_swiginit(self, _mathsat.new_msat_type())
    __swig_destroy__ = _mathsat.delete_msat_type

# Register msat_type in _mathsat:
_mathsat.msat_type_swigregister(msat_type)

MSAT_UNKNOWN = _mathsat.MSAT_UNKNOWN

MSAT_UNSAT = _mathsat.MSAT_UNSAT

MSAT_SAT = _mathsat.MSAT_SAT

MSAT_UNDEF = _mathsat.MSAT_UNDEF

MSAT_FALSE = _mathsat.MSAT_FALSE

MSAT_TRUE = _mathsat.MSAT_TRUE

MSAT_TAG_ERROR = _mathsat.MSAT_TAG_ERROR

MSAT_TAG_UNKNOWN = _mathsat.MSAT_TAG_UNKNOWN

MSAT_TAG_TRUE = _mathsat.MSAT_TAG_TRUE

MSAT_TAG_FALSE = _mathsat.MSAT_TAG_FALSE

MSAT_TAG_AND = _mathsat.MSAT_TAG_AND

MSAT_TAG_OR = _mathsat.MSAT_TAG_OR

MSAT_TAG_NOT = _mathsat.MSAT_TAG_NOT

MSAT_TAG_IFF = _mathsat.MSAT_TAG_IFF

MSAT_TAG_PLUS = _mathsat.MSAT_TAG_PLUS

MSAT_TAG_TIMES = _mathsat.MSAT_TAG_TIMES

MSAT_TAG_DIVIDE = _mathsat.MSAT_TAG_DIVIDE

MSAT_TAG_FLOOR = _mathsat.MSAT_TAG_FLOOR

MSAT_TAG_LEQ = _mathsat.MSAT_TAG_LEQ

MSAT_TAG_EQ = _mathsat.MSAT_TAG_EQ

MSAT_TAG_ITE = _mathsat.MSAT_TAG_ITE

MSAT_TAG_INT_MOD_CONGR = _mathsat.MSAT_TAG_INT_MOD_CONGR

MSAT_TAG_BV_CONCAT = _mathsat.MSAT_TAG_BV_CONCAT

MSAT_TAG_BV_EXTRACT = _mathsat.MSAT_TAG_BV_EXTRACT

MSAT_TAG_BV_NOT = _mathsat.MSAT_TAG_BV_NOT

MSAT_TAG_BV_AND = _mathsat.MSAT_TAG_BV_AND

MSAT_TAG_BV_OR = _mathsat.MSAT_TAG_BV_OR

MSAT_TAG_BV_XOR = _mathsat.MSAT_TAG_BV_XOR

MSAT_TAG_BV_ULT = _mathsat.MSAT_TAG_BV_ULT

MSAT_TAG_BV_SLT = _mathsat.MSAT_TAG_BV_SLT

MSAT_TAG_BV_ULE = _mathsat.MSAT_TAG_BV_ULE

MSAT_TAG_BV_SLE = _mathsat.MSAT_TAG_BV_SLE

MSAT_TAG_BV_COMP = _mathsat.MSAT_TAG_BV_COMP

MSAT_TAG_BV_NEG = _mathsat.MSAT_TAG_BV_NEG

MSAT_TAG_BV_ADD = _mathsat.MSAT_TAG_BV_ADD

MSAT_TAG_BV_SUB = _mathsat.MSAT_TAG_BV_SUB

MSAT_TAG_BV_MUL = _mathsat.MSAT_TAG_BV_MUL

MSAT_TAG_BV_UDIV = _mathsat.MSAT_TAG_BV_UDIV

MSAT_TAG_BV_SDIV = _mathsat.MSAT_TAG_BV_SDIV

MSAT_TAG_BV_UREM = _mathsat.MSAT_TAG_BV_UREM

MSAT_TAG_BV_SREM = _mathsat.MSAT_TAG_BV_SREM

MSAT_TAG_BV_LSHL = _mathsat.MSAT_TAG_BV_LSHL

MSAT_TAG_BV_LSHR = _mathsat.MSAT_TAG_BV_LSHR

MSAT_TAG_BV_ASHR = _mathsat.MSAT_TAG_BV_ASHR

MSAT_TAG_BV_ROL = _mathsat.MSAT_TAG_BV_ROL

MSAT_TAG_BV_ROR = _mathsat.MSAT_TAG_BV_ROR

MSAT_TAG_BV_ZEXT = _mathsat.MSAT_TAG_BV_ZEXT

MSAT_TAG_BV_SEXT = _mathsat.MSAT_TAG_BV_SEXT

MSAT_TAG_ARRAY_READ = _mathsat.MSAT_TAG_ARRAY_READ

MSAT_TAG_ARRAY_WRITE = _mathsat.MSAT_TAG_ARRAY_WRITE

MSAT_TAG_ARRAY_CONST = _mathsat.MSAT_TAG_ARRAY_CONST

MSAT_TAG_FP_EQ = _mathsat.MSAT_TAG_FP_EQ

MSAT_TAG_FP_LT = _mathsat.MSAT_TAG_FP_LT

MSAT_TAG_FP_LE = _mathsat.MSAT_TAG_FP_LE

MSAT_TAG_FP_NEG = _mathsat.MSAT_TAG_FP_NEG

MSAT_TAG_FP_ADD = _mathsat.MSAT_TAG_FP_ADD

MSAT_TAG_FP_SUB = _mathsat.MSAT_TAG_FP_SUB

MSAT_TAG_FP_MUL = _mathsat.MSAT_TAG_FP_MUL

MSAT_TAG_FP_DIV = _mathsat.MSAT_TAG_FP_DIV

MSAT_TAG_FP_SQRT = _mathsat.MSAT_TAG_FP_SQRT

MSAT_TAG_FP_ABS = _mathsat.MSAT_TAG_FP_ABS

MSAT_TAG_FP_MIN = _mathsat.MSAT_TAG_FP_MIN

MSAT_TAG_FP_MAX = _mathsat.MSAT_TAG_FP_MAX

MSAT_TAG_FP_CAST = _mathsat.MSAT_TAG_FP_CAST

MSAT_TAG_FP_ROUND_TO_INT = _mathsat.MSAT_TAG_FP_ROUND_TO_INT

MSAT_TAG_FP_FROM_SBV = _mathsat.MSAT_TAG_FP_FROM_SBV

MSAT_TAG_FP_FROM_UBV = _mathsat.MSAT_TAG_FP_FROM_UBV

MSAT_TAG_FP_TO_SBV = _mathsat.MSAT_TAG_FP_TO_SBV

MSAT_TAG_FP_TO_UBV = _mathsat.MSAT_TAG_FP_TO_UBV

MSAT_TAG_FP_AS_IEEEBV = _mathsat.MSAT_TAG_FP_AS_IEEEBV

MSAT_TAG_FP_ISNAN = _mathsat.MSAT_TAG_FP_ISNAN

MSAT_TAG_FP_ISINF = _mathsat.MSAT_TAG_FP_ISINF

MSAT_TAG_FP_ISZERO = _mathsat.MSAT_TAG_FP_ISZERO

MSAT_TAG_FP_ISSUBNORMAL = _mathsat.MSAT_TAG_FP_ISSUBNORMAL

MSAT_TAG_FP_ISNORMAL = _mathsat.MSAT_TAG_FP_ISNORMAL

MSAT_TAG_FP_ISNEG = _mathsat.MSAT_TAG_FP_ISNEG

MSAT_TAG_FP_ISPOS = _mathsat.MSAT_TAG_FP_ISPOS

MSAT_TAG_FP_FROM_IEEEBV = _mathsat.MSAT_TAG_FP_FROM_IEEEBV

MSAT_TAG_INT_FROM_UBV = _mathsat.MSAT_TAG_INT_FROM_UBV

MSAT_TAG_INT_FROM_SBV = _mathsat.MSAT_TAG_INT_FROM_SBV

MSAT_TAG_INT_TO_BV = _mathsat.MSAT_TAG_INT_TO_BV

MSAT_TAG_PI = _mathsat.MSAT_TAG_PI

MSAT_TAG_EXP = _mathsat.MSAT_TAG_EXP

MSAT_TAG_SIN = _mathsat.MSAT_TAG_SIN

MSAT_TAG_LOG = _mathsat.MSAT_TAG_LOG

MSAT_TAG_POW = _mathsat.MSAT_TAG_POW

MSAT_TAG_ASIN = _mathsat.MSAT_TAG_ASIN

MSAT_TAG_FORALL = _mathsat.MSAT_TAG_FORALL

MSAT_TAG_EXISTS = _mathsat.MSAT_TAG_EXISTS

class msat_model(object):
    r"""Proxy of C msat_model struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_model_repr_get, _mathsat.msat_model_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_model self) -> msat_model"""
        _mathsat.msat_model_swiginit(self, _mathsat.new_msat_model())
    __swig_destroy__ = _mathsat.delete_msat_model

# Register msat_model in _mathsat:
_mathsat.msat_model_swigregister(msat_model)

class msat_model_iterator(object):
    r"""Proxy of C msat_model_iterator struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_model_iterator_repr_get, _mathsat.msat_model_iterator_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_model_iterator self) -> msat_model_iterator"""
        _mathsat.msat_model_iterator_swiginit(self, _mathsat.new_msat_model_iterator())
    __swig_destroy__ = _mathsat.delete_msat_model_iterator

# Register msat_model_iterator in _mathsat:
_mathsat.msat_model_iterator_swigregister(msat_model_iterator)

MSAT_VISIT_PROCESS = _mathsat.MSAT_VISIT_PROCESS

MSAT_VISIT_SKIP = _mathsat.MSAT_VISIT_SKIP

MSAT_VISIT_ABORT = _mathsat.MSAT_VISIT_ABORT

class msat_proof_manager(object):
    r"""Proxy of C msat_proof_manager struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_proof_manager_repr_get, _mathsat.msat_proof_manager_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_proof_manager self) -> msat_proof_manager"""
        _mathsat.msat_proof_manager_swiginit(self, _mathsat.new_msat_proof_manager())
    __swig_destroy__ = _mathsat.delete_msat_proof_manager

# Register msat_proof_manager in _mathsat:
_mathsat.msat_proof_manager_swigregister(msat_proof_manager)

class msat_proof(object):
    r"""Proxy of C msat_proof struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_proof_repr_get, _mathsat.msat_proof_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_proof self) -> msat_proof"""
        _mathsat.msat_proof_swiginit(self, _mathsat.new_msat_proof())
    __swig_destroy__ = _mathsat.delete_msat_proof

# Register msat_proof in _mathsat:
_mathsat.msat_proof_swigregister(msat_proof)


def msat_get_version():
    r"""msat_get_version() -> char *"""
    return _mathsat.msat_get_version()

def msat_get_version_id():
    r"""msat_get_version_id() -> char const *"""
    return _mathsat.msat_get_version_id()

def msat_last_error_message(env):
    r"""msat_last_error_message(msat_env env) -> char const *"""
    return _mathsat.msat_last_error_message(env)

def msat_create_config():
    r"""msat_create_config() -> msat_config"""
    return _mathsat.msat_create_config()

def msat_create_default_config(logic):
    r"""msat_create_default_config(char const * logic) -> msat_config"""
    return _mathsat.msat_create_default_config(logic)

def _msat_parse_config(data):
    r"""_msat_parse_config(char const * data) -> msat_config"""
    return _mathsat._msat_parse_config(data)

def msat_destroy_config(cfg):
    r"""msat_destroy_config(msat_config cfg)"""
    return _mathsat.msat_destroy_config(cfg)

def _msat_create_env(cfg):
    r"""_msat_create_env(msat_config cfg) -> msat_env"""
    return _mathsat._msat_create_env(cfg)

def _msat_create_shared_env(cfg, sibling):
    r"""_msat_create_shared_env(msat_config cfg, msat_env sibling) -> msat_env"""
    return _mathsat._msat_create_shared_env(cfg, sibling)

def msat_destroy_env(e):
    r"""msat_destroy_env(msat_env e)"""
    return _mathsat.msat_destroy_env(e)

def _msat_gc_env(env, tokeep, num_tokeep):
    r"""_msat_gc_env(msat_env env, msat_term tokeep, size_t num_tokeep) -> int"""
    return _mathsat._msat_gc_env(env, tokeep, num_tokeep)

def msat_set_option(cfg, option, value):
    r"""msat_set_option(msat_config cfg, char const * option, char const * value) -> int"""
    return _mathsat.msat_set_option(cfg, option, value)

def msat_set_termination_test(env, func):
    r"""msat_set_termination_test(msat_env env, msat_termination_test func) -> int"""
    return _mathsat.msat_set_termination_test(env, func)

def msat_get_bool_type(env):
    r"""msat_get_bool_type(msat_env env) -> msat_type"""
    return _mathsat.msat_get_bool_type(env)

def msat_get_rational_type(env):
    r"""msat_get_rational_type(msat_env env) -> msat_type"""
    return _mathsat.msat_get_rational_type(env)

def msat_get_integer_type(env):
    r"""msat_get_integer_type(msat_env env) -> msat_type"""
    return _mathsat.msat_get_integer_type(env)

def msat_get_bv_type(env, width):
    r"""msat_get_bv_type(msat_env env, size_t width) -> msat_type"""
    return _mathsat.msat_get_bv_type(env, width)

def msat_get_array_type(env, itp, etp):
    r"""msat_get_array_type(msat_env env, msat_type itp, msat_type etp) -> msat_type"""
    return _mathsat.msat_get_array_type(env, itp, etp)

def msat_get_fp_type(env, exp_width, mant_width):
    r"""msat_get_fp_type(msat_env env, size_t exp_width, size_t mant_width) -> msat_type"""
    return _mathsat.msat_get_fp_type(env, exp_width, mant_width)

def msat_get_fp_roundingmode_type(env):
    r"""msat_get_fp_roundingmode_type(msat_env env) -> msat_type"""
    return _mathsat.msat_get_fp_roundingmode_type(env)

def msat_get_simple_type(env, name):
    r"""msat_get_simple_type(msat_env env, char const * name) -> msat_type"""
    return _mathsat.msat_get_simple_type(env, name)

def _msat_get_function_type(env, param_types, num_params, return_type):
    r"""_msat_get_function_type(msat_env env, msat_type param_types, size_t num_params, msat_type return_type) -> msat_type"""
    return _mathsat._msat_get_function_type(env, param_types, num_params, return_type)

def _msat_get_enum_type(env, name, domain_size, domain):
    r"""_msat_get_enum_type(msat_env env, char const * name, size_t domain_size, char const ** domain) -> msat_type"""
    return _mathsat._msat_get_enum_type(env, name, domain_size, domain)

def msat_is_bool_type(env, tp):
    r"""msat_is_bool_type(msat_env env, msat_type tp) -> int"""
    return _mathsat.msat_is_bool_type(env, tp)

def msat_is_rational_type(env, tp):
    r"""msat_is_rational_type(msat_env env, msat_type tp) -> int"""
    return _mathsat.msat_is_rational_type(env, tp)

def msat_is_integer_type(env, tp):
    r"""msat_is_integer_type(msat_env env, msat_type tp) -> int"""
    return _mathsat.msat_is_integer_type(env, tp)

def _msat_is_bv_type(env, tp, out_width):
    r"""_msat_is_bv_type(msat_env env, msat_type tp, size_t * out_width) -> int"""
    return _mathsat._msat_is_bv_type(env, tp, out_width)

def _msat_is_array_type(env, tp, out_itp, out_etp):
    r"""_msat_is_array_type(msat_env env, msat_type tp, msat_type out_itp, msat_type out_etp) -> int"""
    return _mathsat._msat_is_array_type(env, tp, out_itp, out_etp)

def _msat_is_fp_type(env, tp, out_exp_width, out_mant_width):
    r"""_msat_is_fp_type(msat_env env, msat_type tp, size_t * out_exp_width, size_t * out_mant_width) -> int"""
    return _mathsat._msat_is_fp_type(env, tp, out_exp_width, out_mant_width)

def msat_is_fp_roundingmode_type(env, tp):
    r"""msat_is_fp_roundingmode_type(msat_env env, msat_type tp) -> int"""
    return _mathsat.msat_is_fp_roundingmode_type(env, tp)

def _msat_is_enum_type(env, tp, out_domain_size, out_domain):
    r"""_msat_is_enum_type(msat_env env, msat_type tp, size_t * out_domain_size, msat_decl ** out_domain) -> int"""
    return _mathsat._msat_is_enum_type(env, tp, out_domain_size, out_domain)

def msat_type_equals(t1, t2):
    r"""msat_type_equals(msat_type t1, msat_type t2) -> int"""
    return _mathsat.msat_type_equals(t1, t2)

def msat_type_repr(t):
    r"""msat_type_repr(msat_type t) -> char *"""
    return _mathsat.msat_type_repr(t)

def msat_type_id(t):
    r"""msat_type_id(msat_type t) -> size_t"""
    return _mathsat.msat_type_id(t)

def msat_declare_function(e, name, type):
    r"""msat_declare_function(msat_env e, char const * name, msat_type type) -> msat_decl"""
    return _mathsat.msat_declare_function(e, name, type)

def msat_make_true(e):
    r"""msat_make_true(msat_env e) -> msat_term"""
    return _mathsat.msat_make_true(e)

def msat_make_false(e):
    r"""msat_make_false(msat_env e) -> msat_term"""
    return _mathsat.msat_make_false(e)

def msat_make_iff(e, t1, t2):
    r"""msat_make_iff(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_iff(e, t1, t2)

def msat_make_or(e, t1, t2):
    r"""msat_make_or(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_or(e, t1, t2)

def msat_make_and(e, t1, t2):
    r"""msat_make_and(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_and(e, t1, t2)

def msat_make_not(e, t1):
    r"""msat_make_not(msat_env e, msat_term t1) -> msat_term"""
    return _mathsat.msat_make_not(e, t1)

def msat_make_equal(e, t1, t2):
    r"""msat_make_equal(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_equal(e, t1, t2)

def msat_make_eq(e, t1, t2):
    r"""msat_make_eq(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_eq(e, t1, t2)

def msat_make_leq(e, t1, t2):
    r"""msat_make_leq(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_leq(e, t1, t2)

def msat_make_plus(e, t1, t2):
    r"""msat_make_plus(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_plus(e, t1, t2)

def msat_make_times(e, t1, t2):
    r"""msat_make_times(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_times(e, t1, t2)

def msat_make_divide(e, t1, t2):
    r"""msat_make_divide(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_divide(e, t1, t2)

def _msat_make_int_modular_congruence(e, modulus, t1, t2):
    r"""_msat_make_int_modular_congruence(msat_env e, mpz_t modulus, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat._msat_make_int_modular_congruence(e, modulus, t1, t2)

def msat_make_floor(e, t):
    r"""msat_make_floor(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_floor(e, t)

def msat_make_pi(e):
    r"""msat_make_pi(msat_env e) -> msat_term"""
    return _mathsat.msat_make_pi(e)

def msat_make_exp(e, t):
    r"""msat_make_exp(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_exp(e, t)

def msat_make_sin(e, t):
    r"""msat_make_sin(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_sin(e, t)

def msat_make_log(e, t):
    r"""msat_make_log(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_log(e, t)

def msat_make_pow(e, tb, te):
    r"""msat_make_pow(msat_env e, msat_term tb, msat_term te) -> msat_term"""
    return _mathsat.msat_make_pow(e, tb, te)

def msat_make_asin(e, t):
    r"""msat_make_asin(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_asin(e, t)

def msat_make_number(e, num_rep):
    r"""msat_make_number(msat_env e, char const * num_rep) -> msat_term"""
    return _mathsat.msat_make_number(e, num_rep)

def msat_make_term_ite(e, c, tt, te):
    r"""msat_make_term_ite(msat_env e, msat_term c, msat_term tt, msat_term te) -> msat_term"""
    return _mathsat.msat_make_term_ite(e, c, tt, te)

def msat_make_constant(e, var):
    r"""msat_make_constant(msat_env e, msat_decl var) -> msat_term"""
    return _mathsat.msat_make_constant(e, var)

def msat_make_uf(e, func, args):
    r"""msat_make_uf(msat_env e, msat_decl func, msat_term args) -> msat_term"""
    return _mathsat.msat_make_uf(e, func, args)

def msat_make_array_read(e, arr, idx):
    r"""msat_make_array_read(msat_env e, msat_term arr, msat_term idx) -> msat_term"""
    return _mathsat.msat_make_array_read(e, arr, idx)

def msat_make_array_write(e, arr, idx, elem):
    r"""msat_make_array_write(msat_env e, msat_term arr, msat_term idx, msat_term elem) -> msat_term"""
    return _mathsat.msat_make_array_write(e, arr, idx, elem)

def msat_make_array_const(e, arrtp, elem):
    r"""msat_make_array_const(msat_env e, msat_type arrtp, msat_term elem) -> msat_term"""
    return _mathsat.msat_make_array_const(e, arrtp, elem)

def msat_make_bv_number(e, num_rep, width, base):
    r"""msat_make_bv_number(msat_env e, char const * num_rep, size_t width, size_t base) -> msat_term"""
    return _mathsat.msat_make_bv_number(e, num_rep, width, base)

def msat_make_bv_concat(e, t1, t2):
    r"""msat_make_bv_concat(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_concat(e, t1, t2)

def msat_make_bv_extract(e, msb, lsb, t):
    r"""msat_make_bv_extract(msat_env e, size_t msb, size_t lsb, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_extract(e, msb, lsb, t)

def msat_make_bv_or(e, t1, t2):
    r"""msat_make_bv_or(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_or(e, t1, t2)

def msat_make_bv_xor(e, t1, t2):
    r"""msat_make_bv_xor(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_xor(e, t1, t2)

def msat_make_bv_and(e, t1, t2):
    r"""msat_make_bv_and(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_and(e, t1, t2)

def msat_make_bv_not(e, t):
    r"""msat_make_bv_not(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_not(e, t)

def msat_make_bv_lshl(e, t1, t2):
    r"""msat_make_bv_lshl(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_lshl(e, t1, t2)

def msat_make_bv_lshr(e, t1, t2):
    r"""msat_make_bv_lshr(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_lshr(e, t1, t2)

def msat_make_bv_ashr(e, t1, t2):
    r"""msat_make_bv_ashr(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_ashr(e, t1, t2)

def msat_make_bv_zext(e, amount, t):
    r"""msat_make_bv_zext(msat_env e, size_t amount, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_zext(e, amount, t)

def msat_make_bv_sext(e, amount, t):
    r"""msat_make_bv_sext(msat_env e, size_t amount, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_sext(e, amount, t)

def msat_make_bv_plus(e, t1, t2):
    r"""msat_make_bv_plus(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_plus(e, t1, t2)

def msat_make_bv_minus(e, t1, t2):
    r"""msat_make_bv_minus(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_minus(e, t1, t2)

def msat_make_bv_neg(e, t):
    r"""msat_make_bv_neg(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_neg(e, t)

def msat_make_bv_times(e, t1, t2):
    r"""msat_make_bv_times(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_times(e, t1, t2)

def msat_make_bv_udiv(e, t1, t2):
    r"""msat_make_bv_udiv(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_udiv(e, t1, t2)

def msat_make_bv_urem(e, t1, t2):
    r"""msat_make_bv_urem(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_urem(e, t1, t2)

def msat_make_bv_sdiv(e, t1, t2):
    r"""msat_make_bv_sdiv(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_sdiv(e, t1, t2)

def msat_make_bv_srem(e, t1, t2):
    r"""msat_make_bv_srem(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_srem(e, t1, t2)

def msat_make_bv_ult(e, t1, t2):
    r"""msat_make_bv_ult(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_ult(e, t1, t2)

def msat_make_bv_uleq(e, t1, t2):
    r"""msat_make_bv_uleq(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_uleq(e, t1, t2)

def msat_make_bv_slt(e, t1, t2):
    r"""msat_make_bv_slt(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_slt(e, t1, t2)

def msat_make_bv_sleq(e, t1, t2):
    r"""msat_make_bv_sleq(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_sleq(e, t1, t2)

def msat_make_bv_rol(e, amount, t):
    r"""msat_make_bv_rol(msat_env e, size_t amount, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_rol(e, amount, t)

def msat_make_bv_ror(e, amount, t):
    r"""msat_make_bv_ror(msat_env e, size_t amount, msat_term t) -> msat_term"""
    return _mathsat.msat_make_bv_ror(e, amount, t)

def msat_make_bv_comp(e, t1, t2):
    r"""msat_make_bv_comp(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_bv_comp(e, t1, t2)

def msat_make_fp_roundingmode_nearest_even(e):
    r"""msat_make_fp_roundingmode_nearest_even(msat_env e) -> msat_term"""
    return _mathsat.msat_make_fp_roundingmode_nearest_even(e)

def msat_make_fp_roundingmode_zero(e):
    r"""msat_make_fp_roundingmode_zero(msat_env e) -> msat_term"""
    return _mathsat.msat_make_fp_roundingmode_zero(e)

def msat_make_fp_roundingmode_plus_inf(e):
    r"""msat_make_fp_roundingmode_plus_inf(msat_env e) -> msat_term"""
    return _mathsat.msat_make_fp_roundingmode_plus_inf(e)

def msat_make_fp_roundingmode_minus_inf(e):
    r"""msat_make_fp_roundingmode_minus_inf(msat_env e) -> msat_term"""
    return _mathsat.msat_make_fp_roundingmode_minus_inf(e)

def msat_make_fp_equal(e, t1, t2):
    r"""msat_make_fp_equal(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_equal(e, t1, t2)

def msat_make_fp_lt(e, t1, t2):
    r"""msat_make_fp_lt(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_lt(e, t1, t2)

def msat_make_fp_leq(e, t1, t2):
    r"""msat_make_fp_leq(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_leq(e, t1, t2)

def msat_make_fp_neg(e, t):
    r"""msat_make_fp_neg(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_neg(e, t)

def msat_make_fp_plus(e, rounding, t1, t2):
    r"""msat_make_fp_plus(msat_env e, msat_term rounding, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_plus(e, rounding, t1, t2)

def msat_make_fp_minus(e, rounding, t1, t2):
    r"""msat_make_fp_minus(msat_env e, msat_term rounding, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_minus(e, rounding, t1, t2)

def msat_make_fp_times(e, rounding, t1, t2):
    r"""msat_make_fp_times(msat_env e, msat_term rounding, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_times(e, rounding, t1, t2)

def msat_make_fp_div(e, rounding, t1, t2):
    r"""msat_make_fp_div(msat_env e, msat_term rounding, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_div(e, rounding, t1, t2)

def msat_make_fp_sqrt(e, rounding, t):
    r"""msat_make_fp_sqrt(msat_env e, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_sqrt(e, rounding, t)

def msat_make_fp_abs(e, t):
    r"""msat_make_fp_abs(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_abs(e, t)

def msat_make_fp_min(e, t1, t2):
    r"""msat_make_fp_min(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_min(e, t1, t2)

def msat_make_fp_max(e, t1, t2):
    r"""msat_make_fp_max(msat_env e, msat_term t1, msat_term t2) -> msat_term"""
    return _mathsat.msat_make_fp_max(e, t1, t2)

def msat_make_fp_round_to_int(e, rounding, t):
    r"""msat_make_fp_round_to_int(msat_env e, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_round_to_int(e, rounding, t)

def msat_make_fp_cast(e, exp_w, mant_w, rounding, t):
    r"""msat_make_fp_cast(msat_env e, size_t exp_w, size_t mant_w, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_cast(e, exp_w, mant_w, rounding, t)

def msat_make_fp_to_sbv(e, width, rounding, t):
    r"""msat_make_fp_to_sbv(msat_env e, size_t width, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_to_sbv(e, width, rounding, t)

def msat_make_fp_to_bv(e, width, rounding, t):
    r"""msat_make_fp_to_bv(msat_env e, size_t width, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_to_bv(e, width, rounding, t)

def msat_make_fp_to_ubv(e, width, rounding, t):
    r"""msat_make_fp_to_ubv(msat_env e, size_t width, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_to_ubv(e, width, rounding, t)

def msat_make_fp_from_sbv(e, exp_w, mant_w, rounding, t):
    r"""msat_make_fp_from_sbv(msat_env e, size_t exp_w, size_t mant_w, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_from_sbv(e, exp_w, mant_w, rounding, t)

def msat_make_fp_from_ubv(e, exp_w, mant_w, rounding, t):
    r"""msat_make_fp_from_ubv(msat_env e, size_t exp_w, size_t mant_w, msat_term rounding, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_from_ubv(e, exp_w, mant_w, rounding, t)

def msat_make_fp_as_ieeebv(e, t):
    r"""msat_make_fp_as_ieeebv(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_as_ieeebv(e, t)

def msat_make_fp_from_ieeebv(e, exp_w, mant_w, t):
    r"""msat_make_fp_from_ieeebv(msat_env e, size_t exp_w, size_t mant_w, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_from_ieeebv(e, exp_w, mant_w, t)

def msat_make_fp_isnan(e, t):
    r"""msat_make_fp_isnan(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_isnan(e, t)

def msat_make_fp_isinf(e, t):
    r"""msat_make_fp_isinf(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_isinf(e, t)

def msat_make_fp_iszero(e, t):
    r"""msat_make_fp_iszero(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_iszero(e, t)

def msat_make_fp_issubnormal(e, t):
    r"""msat_make_fp_issubnormal(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_issubnormal(e, t)

def msat_make_fp_isnormal(e, t):
    r"""msat_make_fp_isnormal(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_isnormal(e, t)

def msat_make_fp_isneg(e, t):
    r"""msat_make_fp_isneg(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_isneg(e, t)

def msat_make_fp_ispos(e, t):
    r"""msat_make_fp_ispos(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_fp_ispos(e, t)

def msat_make_fp_plus_inf(e, exp_w, mant_w):
    r"""msat_make_fp_plus_inf(msat_env e, size_t exp_w, size_t mant_w) -> msat_term"""
    return _mathsat.msat_make_fp_plus_inf(e, exp_w, mant_w)

def msat_make_fp_minus_inf(e, exp_w, mant_w):
    r"""msat_make_fp_minus_inf(msat_env e, size_t exp_w, size_t mant_w) -> msat_term"""
    return _mathsat.msat_make_fp_minus_inf(e, exp_w, mant_w)

def msat_make_fp_nan(e, exp_w, mant_w):
    r"""msat_make_fp_nan(msat_env e, size_t exp_w, size_t mant_w) -> msat_term"""
    return _mathsat.msat_make_fp_nan(e, exp_w, mant_w)

def msat_make_fp_rat_number(e, num_rep, exp_w, mant_w, rounding):
    r"""msat_make_fp_rat_number(msat_env e, char const * num_rep, size_t exp_w, size_t mant_w, msat_term rounding) -> msat_term"""
    return _mathsat.msat_make_fp_rat_number(e, num_rep, exp_w, mant_w, rounding)

def msat_make_fp_bits_number(e, bits, exp_w, mant_w):
    r"""msat_make_fp_bits_number(msat_env e, char const * bits, size_t exp_w, size_t mant_w) -> msat_term"""
    return _mathsat.msat_make_fp_bits_number(e, bits, exp_w, mant_w)

def msat_make_int_to_bv(e, width, t):
    r"""msat_make_int_to_bv(msat_env e, size_t width, msat_term t) -> msat_term"""
    return _mathsat.msat_make_int_to_bv(e, width, t)

def msat_make_int_from_ubv(e, t):
    r"""msat_make_int_from_ubv(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_int_from_ubv(e, t)

def msat_make_int_from_sbv(e, t):
    r"""msat_make_int_from_sbv(msat_env e, msat_term t) -> msat_term"""
    return _mathsat.msat_make_int_from_sbv(e, t)

def msat_make_forall(e, var, body):
    r"""msat_make_forall(msat_env e, msat_term var, msat_term body) -> msat_term"""
    return _mathsat.msat_make_forall(e, var, body)

def msat_make_exists(e, var, body):
    r"""msat_make_exists(msat_env e, msat_term var, msat_term body) -> msat_term"""
    return _mathsat.msat_make_exists(e, var, body)

def msat_make_variable(e, name, type):
    r"""msat_make_variable(msat_env e, char const * name, msat_type type) -> msat_term"""
    return _mathsat.msat_make_variable(e, name, type)

def msat_existentially_quantify(e, t, args, n):
    r"""msat_existentially_quantify(msat_env e, msat_term t, msat_term args, size_t n) -> msat_term"""
    return _mathsat.msat_existentially_quantify(e, t, args, n)

def msat_make_term(e, d, args):
    r"""msat_make_term(msat_env e, msat_decl d, msat_term args) -> msat_term"""
    return _mathsat.msat_make_term(e, d, args)

def msat_make_copy_from(e, t, src):
    r"""msat_make_copy_from(msat_env e, msat_term t, msat_env src) -> msat_term"""
    return _mathsat.msat_make_copy_from(e, t, src)

def msat_term_id(t):
    r"""msat_term_id(msat_term t) -> size_t"""
    return _mathsat.msat_term_id(t)

def msat_term_arity(t):
    r"""msat_term_arity(msat_term t) -> size_t"""
    return _mathsat.msat_term_arity(t)

def msat_term_get_arg(t, n):
    r"""msat_term_get_arg(msat_term t, size_t n) -> msat_term"""
    return _mathsat.msat_term_get_arg(t, n)

def msat_term_get_type(t):
    r"""msat_term_get_type(msat_term t) -> msat_type"""
    return _mathsat.msat_term_get_type(t)

def msat_term_is_true(e, t):
    r"""msat_term_is_true(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_true(e, t)

def msat_term_is_false(e, t):
    r"""msat_term_is_false(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_false(e, t)

def msat_term_is_boolean_constant(e, t):
    r"""msat_term_is_boolean_constant(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_boolean_constant(e, t)

def msat_term_is_atom(e, t):
    r"""msat_term_is_atom(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_atom(e, t)

def msat_term_is_number(e, t):
    r"""msat_term_is_number(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_number(e, t)

def msat_term_is_enum_value(e, t):
    r"""msat_term_is_enum_value(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_enum_value(e, t)

def _msat_term_to_number(e, t, out):
    r"""_msat_term_to_number(msat_env e, msat_term t, mpq_t out) -> int"""
    return _mathsat._msat_term_to_number(e, t, out)

def msat_term_is_and(e, t):
    r"""msat_term_is_and(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_and(e, t)

def msat_term_is_or(e, t):
    r"""msat_term_is_or(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_or(e, t)

def msat_term_is_not(e, t):
    r"""msat_term_is_not(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_not(e, t)

def msat_term_is_iff(e, t):
    r"""msat_term_is_iff(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_iff(e, t)

def msat_term_is_term_ite(e, t):
    r"""msat_term_is_term_ite(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_term_ite(e, t)

def msat_term_is_constant(e, t):
    r"""msat_term_is_constant(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_constant(e, t)

def msat_term_is_uf(e, t):
    r"""msat_term_is_uf(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_uf(e, t)

def msat_term_is_equal(e, t):
    r"""msat_term_is_equal(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_equal(e, t)

def msat_term_is_leq(e, t):
    r"""msat_term_is_leq(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_leq(e, t)

def msat_term_is_plus(e, t):
    r"""msat_term_is_plus(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_plus(e, t)

def msat_term_is_times(e, t):
    r"""msat_term_is_times(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_times(e, t)

def msat_term_is_divide(e, t):
    r"""msat_term_is_divide(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_divide(e, t)

def _msat_term_is_int_modular_congruence(e, t, out_mod):
    r"""_msat_term_is_int_modular_congruence(msat_env e, msat_term t, mpz_t out_mod) -> int"""
    return _mathsat._msat_term_is_int_modular_congruence(e, t, out_mod)

def msat_term_is_floor(e, t):
    r"""msat_term_is_floor(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_floor(e, t)

def msat_term_is_pi(e, t):
    r"""msat_term_is_pi(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_pi(e, t)

def msat_term_is_exp(e, t):
    r"""msat_term_is_exp(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_exp(e, t)

def msat_term_is_sin(e, t):
    r"""msat_term_is_sin(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_sin(e, t)

def msat_term_is_log(e, t):
    r"""msat_term_is_log(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_log(e, t)

def msat_term_is_pow(e, t):
    r"""msat_term_is_pow(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_pow(e, t)

def msat_term_is_asin(e, t):
    r"""msat_term_is_asin(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_asin(e, t)

def msat_term_is_array_read(e, t):
    r"""msat_term_is_array_read(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_array_read(e, t)

def msat_term_is_array_write(e, t):
    r"""msat_term_is_array_write(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_array_write(e, t)

def msat_term_is_array_const(e, t):
    r"""msat_term_is_array_const(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_array_const(e, t)

def msat_term_is_bv_concat(e, t):
    r"""msat_term_is_bv_concat(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_concat(e, t)

def _msat_term_is_bv_extract(e, t, out_msb, out_lsb):
    r"""_msat_term_is_bv_extract(msat_env e, msat_term t, size_t * out_msb, size_t * out_lsb) -> int"""
    return _mathsat._msat_term_is_bv_extract(e, t, out_msb, out_lsb)

def msat_term_is_bv_or(e, t):
    r"""msat_term_is_bv_or(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_or(e, t)

def msat_term_is_bv_xor(e, t):
    r"""msat_term_is_bv_xor(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_xor(e, t)

def msat_term_is_bv_and(e, t):
    r"""msat_term_is_bv_and(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_and(e, t)

def msat_term_is_bv_not(e, t):
    r"""msat_term_is_bv_not(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_not(e, t)

def msat_term_is_bv_plus(e, t):
    r"""msat_term_is_bv_plus(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_plus(e, t)

def msat_term_is_bv_minus(e, t):
    r"""msat_term_is_bv_minus(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_minus(e, t)

def msat_term_is_bv_times(e, t):
    r"""msat_term_is_bv_times(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_times(e, t)

def msat_term_is_bv_neg(e, t):
    r"""msat_term_is_bv_neg(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_neg(e, t)

def msat_term_is_bv_udiv(e, t):
    r"""msat_term_is_bv_udiv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_udiv(e, t)

def msat_term_is_bv_urem(e, t):
    r"""msat_term_is_bv_urem(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_urem(e, t)

def msat_term_is_bv_sdiv(e, t):
    r"""msat_term_is_bv_sdiv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_sdiv(e, t)

def msat_term_is_bv_srem(e, t):
    r"""msat_term_is_bv_srem(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_srem(e, t)

def msat_term_is_bv_ult(e, t):
    r"""msat_term_is_bv_ult(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_ult(e, t)

def msat_term_is_bv_uleq(e, t):
    r"""msat_term_is_bv_uleq(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_uleq(e, t)

def msat_term_is_bv_slt(e, t):
    r"""msat_term_is_bv_slt(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_slt(e, t)

def msat_term_is_bv_sleq(e, t):
    r"""msat_term_is_bv_sleq(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_sleq(e, t)

def msat_term_is_bv_lshl(e, t):
    r"""msat_term_is_bv_lshl(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_lshl(e, t)

def msat_term_is_bv_lshr(e, t):
    r"""msat_term_is_bv_lshr(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_lshr(e, t)

def msat_term_is_bv_ashr(e, t):
    r"""msat_term_is_bv_ashr(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_ashr(e, t)

def _msat_term_is_bv_zext(e, t, out_amount):
    r"""_msat_term_is_bv_zext(msat_env e, msat_term t, size_t * out_amount) -> int"""
    return _mathsat._msat_term_is_bv_zext(e, t, out_amount)

def _msat_term_is_bv_sext(e, t, out_amount):
    r"""_msat_term_is_bv_sext(msat_env e, msat_term t, size_t * out_amount) -> int"""
    return _mathsat._msat_term_is_bv_sext(e, t, out_amount)

def _msat_term_is_bv_rol(e, t, out_amount):
    r"""_msat_term_is_bv_rol(msat_env e, msat_term t, size_t * out_amount) -> int"""
    return _mathsat._msat_term_is_bv_rol(e, t, out_amount)

def _msat_term_is_bv_ror(e, t, out_amount):
    r"""_msat_term_is_bv_ror(msat_env e, msat_term t, size_t * out_amount) -> int"""
    return _mathsat._msat_term_is_bv_ror(e, t, out_amount)

def msat_term_is_bv_comp(e, t):
    r"""msat_term_is_bv_comp(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_bv_comp(e, t)

def msat_term_is_fp_roundingmode_nearest_even(e, t):
    r"""msat_term_is_fp_roundingmode_nearest_even(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_roundingmode_nearest_even(e, t)

def msat_term_is_fp_roundingmode_zero(e, t):
    r"""msat_term_is_fp_roundingmode_zero(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_roundingmode_zero(e, t)

def msat_term_is_fp_roundingmode_plus_inf(e, t):
    r"""msat_term_is_fp_roundingmode_plus_inf(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_roundingmode_plus_inf(e, t)

def msat_term_is_fp_roundingmode_minus_inf(e, t):
    r"""msat_term_is_fp_roundingmode_minus_inf(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_roundingmode_minus_inf(e, t)

def msat_term_is_fp_equal(e, t):
    r"""msat_term_is_fp_equal(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_equal(e, t)

def msat_term_is_fp_lt(e, t):
    r"""msat_term_is_fp_lt(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_lt(e, t)

def msat_term_is_fp_leq(e, t):
    r"""msat_term_is_fp_leq(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_leq(e, t)

def msat_term_is_fp_neg(e, t):
    r"""msat_term_is_fp_neg(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_neg(e, t)

def msat_term_is_fp_plus(e, t):
    r"""msat_term_is_fp_plus(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_plus(e, t)

def msat_term_is_fp_minus(e, t):
    r"""msat_term_is_fp_minus(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_minus(e, t)

def msat_term_is_fp_times(e, t):
    r"""msat_term_is_fp_times(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_times(e, t)

def msat_term_is_fp_div(e, t):
    r"""msat_term_is_fp_div(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_div(e, t)

def msat_term_is_fp_sqrt(e, t):
    r"""msat_term_is_fp_sqrt(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_sqrt(e, t)

def msat_term_is_fp_abs(e, t):
    r"""msat_term_is_fp_abs(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_abs(e, t)

def msat_term_is_fp_min(e, t):
    r"""msat_term_is_fp_min(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_min(e, t)

def msat_term_is_fp_max(e, t):
    r"""msat_term_is_fp_max(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_max(e, t)

def msat_term_is_fp_round_to_int(e, t):
    r"""msat_term_is_fp_round_to_int(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_round_to_int(e, t)

def msat_term_is_fp_cast(e, t):
    r"""msat_term_is_fp_cast(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_cast(e, t)

def msat_term_is_fp_to_sbv(e, t):
    r"""msat_term_is_fp_to_sbv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_to_sbv(e, t)

def msat_term_is_fp_to_bv(e, t):
    r"""msat_term_is_fp_to_bv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_to_bv(e, t)

def msat_term_is_fp_to_ubv(e, t):
    r"""msat_term_is_fp_to_ubv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_to_ubv(e, t)

def msat_term_is_fp_from_sbv(e, t):
    r"""msat_term_is_fp_from_sbv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_from_sbv(e, t)

def msat_term_is_fp_from_ubv(e, t):
    r"""msat_term_is_fp_from_ubv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_from_ubv(e, t)

def msat_term_is_fp_as_ieeebv(e, t):
    r"""msat_term_is_fp_as_ieeebv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_as_ieeebv(e, t)

def msat_term_is_fp_from_ieeebv(e, t):
    r"""msat_term_is_fp_from_ieeebv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_from_ieeebv(e, t)

def msat_term_is_fp_isnan(e, t):
    r"""msat_term_is_fp_isnan(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_isnan(e, t)

def msat_term_is_fp_isinf(e, t):
    r"""msat_term_is_fp_isinf(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_isinf(e, t)

def msat_term_is_fp_iszero(e, t):
    r"""msat_term_is_fp_iszero(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_iszero(e, t)

def msat_term_is_fp_issubnormal(e, t):
    r"""msat_term_is_fp_issubnormal(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_issubnormal(e, t)

def msat_term_is_fp_isnormal(e, t):
    r"""msat_term_is_fp_isnormal(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_isnormal(e, t)

def msat_term_is_fp_isneg(e, t):
    r"""msat_term_is_fp_isneg(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_isneg(e, t)

def msat_term_is_fp_ispos(e, t):
    r"""msat_term_is_fp_ispos(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_fp_ispos(e, t)

def msat_term_is_int_to_bv(e, t):
    r"""msat_term_is_int_to_bv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_int_to_bv(e, t)

def msat_term_is_int_from_ubv(e, t):
    r"""msat_term_is_int_from_ubv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_int_from_ubv(e, t)

def msat_term_is_int_from_sbv(e, t):
    r"""msat_term_is_int_from_sbv(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_int_from_sbv(e, t)

def msat_term_is_quantifier(e, t):
    r"""msat_term_is_quantifier(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_quantifier(e, t)

def msat_term_is_forall(e, t):
    r"""msat_term_is_forall(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_forall(e, t)

def msat_term_is_exists(e, t):
    r"""msat_term_is_exists(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_exists(e, t)

def msat_term_is_variable(e, t):
    r"""msat_term_is_variable(msat_env e, msat_term t) -> int"""
    return _mathsat.msat_term_is_variable(e, t)

def msat_visit_term(e, t, func):
    r"""msat_visit_term(msat_env e, msat_term t, msat_visit_term_callback func) -> int"""
    return _mathsat.msat_visit_term(e, t, func)

def _msat_apply_substitution(e, t, n, to_subst, values):
    r"""_msat_apply_substitution(msat_env e, msat_term t, size_t n, msat_term to_subst, msat_term values) -> msat_term"""
    return _mathsat._msat_apply_substitution(e, t, n, to_subst, values)

def msat_find_decl(e, symbol):
    r"""msat_find_decl(msat_env e, char const * symbol) -> msat_decl"""
    return _mathsat.msat_find_decl(e, symbol)

def msat_term_get_decl(t):
    r"""msat_term_get_decl(msat_term t) -> msat_decl"""
    return _mathsat.msat_term_get_decl(t)

def msat_decl_id(d):
    r"""msat_decl_id(msat_decl d) -> size_t"""
    return _mathsat.msat_decl_id(d)

def msat_decl_get_tag(e, d):
    r"""msat_decl_get_tag(msat_env e, msat_decl d) -> msat_symbol_tag"""
    return _mathsat.msat_decl_get_tag(e, d)

def msat_decl_get_return_type(d):
    r"""msat_decl_get_return_type(msat_decl d) -> msat_type"""
    return _mathsat.msat_decl_get_return_type(d)

def msat_decl_get_arity(d):
    r"""msat_decl_get_arity(msat_decl d) -> size_t"""
    return _mathsat.msat_decl_get_arity(d)

def msat_decl_get_arg_type(d, n):
    r"""msat_decl_get_arg_type(msat_decl d, size_t n) -> msat_type"""
    return _mathsat.msat_decl_get_arg_type(d, n)

def msat_decl_get_name(d):
    r"""msat_decl_get_name(msat_decl d) -> char *"""
    return _mathsat.msat_decl_get_name(d)

def msat_decl_repr(d):
    r"""msat_decl_repr(msat_decl d) -> char *"""
    return _mathsat.msat_decl_repr(d)

def msat_term_repr(t):
    r"""msat_term_repr(msat_term t) -> char *"""
    return _mathsat.msat_term_repr(t)

def msat_from_string(e, data):
    r"""msat_from_string(msat_env e, char const * data) -> msat_term"""
    return _mathsat.msat_from_string(e, data)

def msat_from_smtlib1(e, data):
    r"""msat_from_smtlib1(msat_env e, char const * data) -> msat_term"""
    return _mathsat.msat_from_smtlib1(e, data)

def msat_from_smtlib2(e, data):
    r"""msat_from_smtlib2(msat_env e, char const * data) -> msat_term"""
    return _mathsat.msat_from_smtlib2(e, data)

def msat_to_smtlib1(e, term):
    r"""msat_to_smtlib1(msat_env e, msat_term term) -> char *"""
    return _mathsat.msat_to_smtlib1(e, term)

def msat_to_smtlib2(e, term):
    r"""msat_to_smtlib2(msat_env e, msat_term term) -> char *"""
    return _mathsat.msat_to_smtlib2(e, term)

def msat_to_smtlib2_ext(e, term, logic_name, use_defines):
    r"""msat_to_smtlib2_ext(msat_env e, msat_term term, char const * logic_name, int use_defines) -> char *"""
    return _mathsat.msat_to_smtlib2_ext(e, term, logic_name, use_defines)

def msat_to_smtlib2_term(e, term):
    r"""msat_to_smtlib2_term(msat_env e, msat_term term) -> char *"""
    return _mathsat.msat_to_smtlib2_term(e, term)

def _msat_named_list_from_smtlib2(e, data, out_n, out_names, out_terms):
    r"""_msat_named_list_from_smtlib2(msat_env e, char const * data, size_t * out_n, char *** out_names, msat_term ** out_terms) -> int"""
    return _mathsat._msat_named_list_from_smtlib2(e, data, out_n, out_names, out_terms)

def _msat_named_list_to_smtlib2(e, n, names, terms):
    r"""_msat_named_list_to_smtlib2(msat_env e, size_t n, char const ** names, msat_term terms) -> char *"""
    return _mathsat._msat_named_list_to_smtlib2(e, n, names, terms)

def _msat_annotated_list_from_smtlib2(e, data, out_n, out_terms, out_annots):
    r"""_msat_annotated_list_from_smtlib2(msat_env e, char const * data, size_t * out_n, msat_term ** out_terms, char *** out_annots) -> int"""
    return _mathsat._msat_annotated_list_from_smtlib2(e, data, out_n, out_terms, out_annots)

def _msat_annotated_list_to_smtlib2(e, n, terms, annots):
    r"""_msat_annotated_list_to_smtlib2(msat_env e, size_t n, msat_term terms, char const ** annots) -> char *"""
    return _mathsat._msat_annotated_list_to_smtlib2(e, n, terms, annots)

def msat_push_backtrack_point(e):
    r"""msat_push_backtrack_point(msat_env e) -> int"""
    return _mathsat.msat_push_backtrack_point(e)

def msat_pop_backtrack_point(e):
    r"""msat_pop_backtrack_point(msat_env e) -> int"""
    return _mathsat.msat_pop_backtrack_point(e)

def msat_num_backtrack_points(e):
    r"""msat_num_backtrack_points(msat_env e) -> size_t"""
    return _mathsat.msat_num_backtrack_points(e)

def msat_reset_env(e):
    r"""msat_reset_env(msat_env e) -> int"""
    return _mathsat.msat_reset_env(e)

def msat_assert_formula(e, formula):
    r"""msat_assert_formula(msat_env e, msat_term formula) -> int"""
    return _mathsat.msat_assert_formula(e, formula)

def msat_add_preferred_for_branching(e, boolvar, phase):
    r"""msat_add_preferred_for_branching(msat_env e, msat_term boolvar, msat_truth_value phase) -> int"""
    return _mathsat.msat_add_preferred_for_branching(e, boolvar, phase)

def msat_clear_preferred_for_branching(e):
    r"""msat_clear_preferred_for_branching(msat_env e) -> int"""
    return _mathsat.msat_clear_preferred_for_branching(e)

def msat_solve(e):
    r"""msat_solve(msat_env e) -> msat_result"""
    return _mathsat.msat_solve(e)

def _msat_solve_with_assumptions(e, assumptions, num_assumptions):
    r"""_msat_solve_with_assumptions(msat_env e, msat_term assumptions, size_t num_assumptions) -> msat_result"""
    return _mathsat._msat_solve_with_assumptions(e, assumptions, num_assumptions)

def _msat_all_sat(e, important, num_important, func):
    r"""_msat_all_sat(msat_env e, msat_term important, size_t num_important, msat_all_sat_model_callback func) -> int"""
    return _mathsat._msat_all_sat(e, important, num_important, func)

def _msat_solve_diversify(e, diversifiers, num_diversifiers, func):
    r"""_msat_solve_diversify(msat_env e, msat_term diversifiers, size_t num_diversifiers, msat_solve_diversify_model_callback func) -> int"""
    return _mathsat._msat_solve_diversify(e, diversifiers, num_diversifiers, func)

def _msat_get_asserted_formulas(e, num_asserted):
    r"""_msat_get_asserted_formulas(msat_env e, size_t * num_asserted) -> msat_term"""
    return _mathsat._msat_get_asserted_formulas(e, num_asserted)

def _msat_get_theory_lemmas(e, num_tlemmas):
    r"""_msat_get_theory_lemmas(msat_env e, size_t * num_tlemmas) -> msat_term"""
    return _mathsat._msat_get_theory_lemmas(e, num_tlemmas)

def msat_get_search_stats(e):
    r"""msat_get_search_stats(msat_env e) -> char *"""
    return _mathsat.msat_get_search_stats(e)

def _msat_simplify(e, formula, to_protect, num_to_protect):
    r"""_msat_simplify(msat_env e, msat_term formula, msat_term to_protect, size_t num_to_protect) -> msat_term"""
    return _mathsat._msat_simplify(e, formula, to_protect, num_to_protect)

def msat_create_itp_group(e):
    r"""msat_create_itp_group(msat_env e) -> int"""
    return _mathsat.msat_create_itp_group(e)

def msat_set_itp_group(e, group):
    r"""msat_set_itp_group(msat_env e, int group) -> int"""
    return _mathsat.msat_set_itp_group(e, group)

def _msat_get_interpolant(e, groups_of_a, n):
    r"""_msat_get_interpolant(msat_env e, int * groups_of_a, size_t n) -> msat_term"""
    return _mathsat._msat_get_interpolant(e, groups_of_a, n)

def msat_get_model_value(e, term):
    r"""msat_get_model_value(msat_env e, msat_term term) -> msat_term"""
    return _mathsat.msat_get_model_value(e, term)

def msat_create_model_iterator(e):
    r"""msat_create_model_iterator(msat_env e) -> msat_model_iterator"""
    return _mathsat.msat_create_model_iterator(e)

def msat_model_iterator_has_next(i):
    r"""msat_model_iterator_has_next(msat_model_iterator i) -> int"""
    return _mathsat.msat_model_iterator_has_next(i)

def _msat_model_iterator_next(i, t, v):
    r"""_msat_model_iterator_next(msat_model_iterator i, msat_term t, msat_term v) -> int"""
    return _mathsat._msat_model_iterator_next(i, t, v)

def msat_destroy_model_iterator(i):
    r"""msat_destroy_model_iterator(msat_model_iterator i)"""
    return _mathsat.msat_destroy_model_iterator(i)

def msat_get_model(e):
    r"""msat_get_model(msat_env e) -> msat_model"""
    return _mathsat.msat_get_model(e)

def msat_destroy_model(m):
    r"""msat_destroy_model(msat_model m)"""
    return _mathsat.msat_destroy_model(m)

def msat_model_eval(m, t):
    r"""msat_model_eval(msat_model m, msat_term t) -> msat_term"""
    return _mathsat.msat_model_eval(m, t)

def msat_model_create_iterator(m):
    r"""msat_model_create_iterator(msat_model m) -> msat_model_iterator"""
    return _mathsat.msat_model_create_iterator(m)

def _msat_get_unsat_core(e, core_size):
    r"""_msat_get_unsat_core(msat_env e, size_t * core_size) -> msat_term"""
    return _mathsat._msat_get_unsat_core(e, core_size)

def msat_get_unsat_core_ext(e, core_size, extractor, user_data):
    r"""msat_get_unsat_core_ext(msat_env e, size_t * core_size, msat_ext_unsat_core_extractor extractor, void * user_data) -> msat_term"""
    return _mathsat.msat_get_unsat_core_ext(e, core_size, extractor, user_data)

def _msat_get_unsat_assumptions(e, assumps_size):
    r"""_msat_get_unsat_assumptions(msat_env e, size_t * assumps_size) -> msat_term"""
    return _mathsat._msat_get_unsat_assumptions(e, assumps_size)

def msat_get_proof_manager(e):
    r"""msat_get_proof_manager(msat_env e) -> msat_proof_manager"""
    return _mathsat.msat_get_proof_manager(e)

def msat_destroy_proof_manager(m):
    r"""msat_destroy_proof_manager(msat_proof_manager m)"""
    return _mathsat.msat_destroy_proof_manager(m)

def msat_get_proof(m):
    r"""msat_get_proof(msat_proof_manager m) -> msat_proof"""
    return _mathsat.msat_get_proof(m)

def msat_proof_id(p):
    r"""msat_proof_id(msat_proof p) -> size_t"""
    return _mathsat.msat_proof_id(p)

def msat_proof_is_term(p):
    r"""msat_proof_is_term(msat_proof p) -> int"""
    return _mathsat.msat_proof_is_term(p)

def msat_proof_get_term(p):
    r"""msat_proof_get_term(msat_proof p) -> msat_term"""
    return _mathsat.msat_proof_get_term(p)

def msat_proof_get_name(p):
    r"""msat_proof_get_name(msat_proof p) -> char const *"""
    return _mathsat.msat_proof_get_name(p)

def msat_proof_get_arity(p):
    r"""msat_proof_get_arity(msat_proof p) -> size_t"""
    return _mathsat.msat_proof_get_arity(p)

def msat_proof_get_child(p, i):
    r"""msat_proof_get_child(msat_proof p, size_t i) -> msat_proof"""
    return _mathsat.msat_proof_get_child(p, i)
class msat_dpll_callback(object):
    r"""Proxy of C msat_dpll_callback struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_dpll_callback_repr_get, _mathsat.msat_dpll_callback_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_dpll_callback self) -> msat_dpll_callback"""
        _mathsat.msat_dpll_callback_swiginit(self, _mathsat.new_msat_dpll_callback())
    __swig_destroy__ = _mathsat.delete_msat_dpll_callback

# Register msat_dpll_callback in _mathsat:
_mathsat.msat_dpll_callback_swigregister(msat_dpll_callback)

class msat_ext_dpll_interface(object):
    r"""Proxy of C msat_ext_dpll_interface struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    new_var = property(_mathsat.msat_ext_dpll_interface_new_var_get, _mathsat.msat_ext_dpll_interface_new_var_set, doc=r"""new_var : p.f(p.void).int""")
    set_decision_var = property(_mathsat.msat_ext_dpll_interface_set_decision_var_get, _mathsat.msat_ext_dpll_interface_set_decision_var_set, doc=r"""set_decision_var : p.f(p.void,int,int).int""")
    set_frozen = property(_mathsat.msat_ext_dpll_interface_set_frozen_get, _mathsat.msat_ext_dpll_interface_set_frozen_set, doc=r"""set_frozen : p.f(p.void,int,int).int""")
    add_clause = property(_mathsat.msat_ext_dpll_interface_add_clause_get, _mathsat.msat_ext_dpll_interface_add_clause_set, doc=r"""add_clause : p.f(p.void,p.int,int,int).int""")
    solve = property(_mathsat.msat_ext_dpll_interface_solve_get, _mathsat.msat_ext_dpll_interface_solve_set, doc=r"""solve : p.f(p.void,p.int,p.p.int).msat_result""")
    model_value = property(_mathsat.msat_ext_dpll_interface_model_value_get, _mathsat.msat_ext_dpll_interface_model_value_set, doc=r"""model_value : p.f(p.void,int).msat_truth_value""")
    enqueue_assignment = property(_mathsat.msat_ext_dpll_interface_enqueue_assignment_get, _mathsat.msat_ext_dpll_interface_enqueue_assignment_set, doc=r"""enqueue_assignment : p.f(p.void,int).int""")
    remove_clauses_containing = property(_mathsat.msat_ext_dpll_interface_remove_clauses_containing_get, _mathsat.msat_ext_dpll_interface_remove_clauses_containing_set, doc=r"""remove_clauses_containing : p.f(p.void,int).int""")
    reset = property(_mathsat.msat_ext_dpll_interface_reset_get, _mathsat.msat_ext_dpll_interface_reset_set, doc=r"""reset : p.f(p.void).int""")
    set_callback = property(_mathsat.msat_ext_dpll_interface_set_callback_get, _mathsat.msat_ext_dpll_interface_set_callback_set, doc=r"""set_callback : p.f(p.void,msat_dpll_callback).int""")

    def __init__(self):
        r"""__init__(msat_ext_dpll_interface self) -> msat_ext_dpll_interface"""
        _mathsat.msat_ext_dpll_interface_swiginit(self, _mathsat.new_msat_ext_dpll_interface())
    __swig_destroy__ = _mathsat.delete_msat_ext_dpll_interface

# Register msat_ext_dpll_interface in _mathsat:
_mathsat.msat_ext_dpll_interface_swigregister(msat_ext_dpll_interface)


def msat_set_external_dpll_engine(env, engine):
    r"""msat_set_external_dpll_engine(msat_env env, msat_ext_dpll_interface engine) -> int"""
    return _mathsat.msat_set_external_dpll_engine(env, engine)

def msat_dpll_callback_no_conflict_after_bcp(cb, code, conflict):
    r"""msat_dpll_callback_no_conflict_after_bcp(msat_dpll_callback cb, msat_truth_value * code, int ** conflict) -> int"""
    return _mathsat.msat_dpll_callback_no_conflict_after_bcp(cb, code, conflict)

def msat_dpll_callback_model_found(cb, code, conflict):
    r"""msat_dpll_callback_model_found(msat_dpll_callback cb, msat_truth_value * code, int ** conflict) -> int"""
    return _mathsat.msat_dpll_callback_model_found(cb, code, conflict)

def msat_dpll_callback_notify_assignment(cb, lit):
    r"""msat_dpll_callback_notify_assignment(msat_dpll_callback cb, int lit) -> int"""
    return _mathsat.msat_dpll_callback_notify_assignment(cb, lit)

def msat_dpll_callback_notify_new_level(cb):
    r"""msat_dpll_callback_notify_new_level(msat_dpll_callback cb) -> int"""
    return _mathsat.msat_dpll_callback_notify_new_level(cb)

def msat_dpll_callback_notify_backtrack(cb, level):
    r"""msat_dpll_callback_notify_backtrack(msat_dpll_callback cb, int level) -> int"""
    return _mathsat.msat_dpll_callback_notify_backtrack(cb, level)

def msat_dpll_callback_ask_theory_reason(cb, lit, reason):
    r"""msat_dpll_callback_ask_theory_reason(msat_dpll_callback cb, int lit, int ** reason) -> int"""
    return _mathsat.msat_dpll_callback_ask_theory_reason(cb, lit, reason)
class msat_aig_manager(object):
    r"""Proxy of C msat_aig_manager struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    repr = property(_mathsat.msat_aig_manager_repr_get, _mathsat.msat_aig_manager_repr_set, doc=r"""repr : p.void""")

    def __init__(self):
        r"""__init__(msat_aig_manager self) -> msat_aig_manager"""
        _mathsat.msat_aig_manager_swiginit(self, _mathsat.new_msat_aig_manager())
    __swig_destroy__ = _mathsat.delete_msat_aig_manager

# Register msat_aig_manager in _mathsat:
_mathsat.msat_aig_manager_swigregister(msat_aig_manager)


def msat_create_aig_manager(env):
    r"""msat_create_aig_manager(msat_env env) -> msat_aig_manager"""
    return _mathsat.msat_create_aig_manager(env)

def MSAT_ERROR_AIG_MANAGER(mgr):
    r"""MSAT_ERROR_AIG_MANAGER(msat_aig_manager mgr) -> int"""
    return _mathsat.MSAT_ERROR_AIG_MANAGER(mgr)

def msat_destroy_aig_manager(mgr):
    r"""msat_destroy_aig_manager(msat_aig_manager mgr)"""
    return _mathsat.msat_destroy_aig_manager(mgr)

def msat_aig_true(mgr):
    r"""msat_aig_true(msat_aig_manager mgr) -> msat_aig"""
    return _mathsat.msat_aig_true(mgr)

def msat_aig_false(mgr):
    r"""msat_aig_false(msat_aig_manager mgr) -> msat_aig"""
    return _mathsat.msat_aig_false(mgr)

def msat_aig_var(mgr, v):
    r"""msat_aig_var(msat_aig_manager mgr, int v) -> msat_aig"""
    return _mathsat.msat_aig_var(mgr, v)

def msat_aig_and(mgr, a1, a2):
    r"""msat_aig_and(msat_aig_manager mgr, msat_aig a1, msat_aig a2) -> msat_aig"""
    return _mathsat.msat_aig_and(mgr, a1, a2)

def msat_aig_not(a):
    r"""msat_aig_not(msat_aig a) -> msat_aig"""
    return _mathsat.msat_aig_not(a)

def msat_aig_or(mgr, a, b):
    r"""msat_aig_or(msat_aig_manager mgr, msat_aig a, msat_aig b) -> msat_aig"""
    return _mathsat.msat_aig_or(mgr, a, b)

def msat_aig_ite(mgr, c, t, e):
    r"""msat_aig_ite(msat_aig_manager mgr, msat_aig c, msat_aig t, msat_aig e) -> msat_aig"""
    return _mathsat.msat_aig_ite(mgr, c, t, e)

def msat_aig_iff(mgr, a, b):
    r"""msat_aig_iff(msat_aig_manager mgr, msat_aig a, msat_aig b) -> msat_aig"""
    return _mathsat.msat_aig_iff(mgr, a, b)

def msat_aig_xor(mgr, a, b):
    r"""msat_aig_xor(msat_aig_manager mgr, msat_aig a, msat_aig b) -> msat_aig"""
    return _mathsat.msat_aig_xor(mgr, a, b)

def msat_aig_null():
    r"""msat_aig_null() -> msat_aig"""
    return _mathsat.msat_aig_null()

def msat_aig_id(a):
    r"""msat_aig_id(msat_aig a) -> size_t"""
    return _mathsat.msat_aig_id(a)

def msat_aig_is_negated(a):
    r"""msat_aig_is_negated(msat_aig a) -> int"""
    return _mathsat.msat_aig_is_negated(a)

def msat_aig_is_and(a):
    r"""msat_aig_is_and(msat_aig a) -> int"""
    return _mathsat.msat_aig_is_and(a)

def msat_aig_get_var(a):
    r"""msat_aig_get_var(msat_aig a) -> int"""
    return _mathsat.msat_aig_get_var(a)

def msat_aig_get_left(a):
    r"""msat_aig_get_left(msat_aig a) -> msat_aig"""
    return _mathsat.msat_aig_get_left(a)

def msat_aig_get_right(a):
    r"""msat_aig_get_right(msat_aig a) -> msat_aig"""
    return _mathsat.msat_aig_get_right(a)

def msat_aig_strip(a):
    r"""msat_aig_strip(msat_aig a) -> msat_aig"""
    return _mathsat.msat_aig_strip(a)

def msat_aig_to_aiger(mgr, a):
    r"""msat_aig_to_aiger(msat_aig_manager mgr, msat_aig a) -> char *"""
    return _mathsat.msat_aig_to_aiger(mgr, a)

def _msat_aig_encode(mgr, t, out_size):
    r"""_msat_aig_encode(msat_aig_manager mgr, msat_term t, size_t * out_size) -> msat_aig *"""
    return _mathsat._msat_aig_encode(mgr, t, out_size)
MSAT_EXIST_ELIM_ALLSMT_FM = _mathsat.MSAT_EXIST_ELIM_ALLSMT_FM

MSAT_EXIST_ELIM_VTS = _mathsat.MSAT_EXIST_ELIM_VTS

class msat_exist_elim_options(object):
    r"""Proxy of C msat_exist_elim_options struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    toplevel_propagation = property(_mathsat.msat_exist_elim_options_toplevel_propagation_get, _mathsat.msat_exist_elim_options_toplevel_propagation_set, doc=r"""toplevel_propagation : int""")
    boolean_simplifications = property(_mathsat.msat_exist_elim_options_boolean_simplifications_get, _mathsat.msat_exist_elim_options_boolean_simplifications_set, doc=r"""boolean_simplifications : int""")
    remove_redundant_constraints = property(_mathsat.msat_exist_elim_options_remove_redundant_constraints_get, _mathsat.msat_exist_elim_options_remove_redundant_constraints_set, doc=r"""remove_redundant_constraints : int""")

    def __init__(self):
        r"""__init__(msat_exist_elim_options self) -> msat_exist_elim_options"""
        _mathsat.msat_exist_elim_options_swiginit(self, _mathsat.new_msat_exist_elim_options())
    __swig_destroy__ = _mathsat.delete_msat_exist_elim_options

# Register msat_exist_elim_options in _mathsat:
_mathsat.msat_exist_elim_options_swigregister(msat_exist_elim_options)


def _msat_exist_elim(env, formula, vars_to_elim, num_vars_to_elim, algo, options):
    r"""_msat_exist_elim(msat_env env, msat_term formula, msat_term vars_to_elim, size_t num_vars_to_elim, msat_exist_elim_algorithm algo, msat_exist_elim_options options) -> msat_term"""
    return _mathsat._msat_exist_elim(env, formula, vars_to_elim, num_vars_to_elim, algo, options)

def _msat_exist_elim_model(env, formula, vars_to_elim, num_vars_to_elim, model_vars, model_values, model_size):
    r"""_msat_exist_elim_model(msat_env env, msat_term formula, msat_term vars_to_elim, size_t num_vars_to_elim, msat_term model_vars, msat_term model_values, size_t model_size) -> msat_term"""
    return _mathsat._msat_exist_elim_model(env, formula, vars_to_elim, num_vars_to_elim, model_vars, model_values, model_size)

def msat_aig_simplify(env, formula):
    r"""msat_aig_simplify(msat_env env, msat_term formula) -> msat_term"""
    return _mathsat.msat_aig_simplify(env, formula)

def msat_to_nnf(env, formula):
    r"""msat_to_nnf(msat_env env, msat_term formula) -> msat_term"""
    return _mathsat.msat_to_nnf(env, formula)

def msat_lra_simplify(env, formula):
    r"""msat_lra_simplify(msat_env env, msat_term formula) -> msat_term"""
    return _mathsat.msat_lra_simplify(env, formula)

def MSAT_ERROR_CONFIG(c):
    r"""MSAT_ERROR_CONFIG(msat_config c) -> int"""
    return _mathsat.MSAT_ERROR_CONFIG(c)

def MSAT_ERROR_ENV(e):
    r"""MSAT_ERROR_ENV(msat_env e) -> int"""
    return _mathsat.MSAT_ERROR_ENV(e)

def MSAT_ERROR_TERM(t):
    r"""MSAT_ERROR_TERM(msat_term t) -> int"""
    return _mathsat.MSAT_ERROR_TERM(t)

def MSAT_ERROR_DECL(d):
    r"""MSAT_ERROR_DECL(msat_decl d) -> int"""
    return _mathsat.MSAT_ERROR_DECL(d)

def MSAT_MAKE_ERROR_TERM():
    r"""MSAT_MAKE_ERROR_TERM() -> msat_term"""
    return _mathsat.MSAT_MAKE_ERROR_TERM()

def MSAT_ERROR_TYPE(t):
    r"""MSAT_ERROR_TYPE(msat_type t) -> int"""
    return _mathsat.MSAT_ERROR_TYPE(t)

def MSAT_ERROR_MODEL_ITERATOR(i):
    r"""MSAT_ERROR_MODEL_ITERATOR(msat_model_iterator i) -> int"""
    return _mathsat.MSAT_ERROR_MODEL_ITERATOR(i)

def MSAT_ERROR_MODEL(m):
    r"""MSAT_ERROR_MODEL(msat_model m) -> int"""
    return _mathsat.MSAT_ERROR_MODEL(m)

def MSAT_ERROR_PROOF_MANAGER(pm):
    r"""MSAT_ERROR_PROOF_MANAGER(msat_proof_manager pm) -> int"""
    return _mathsat.MSAT_ERROR_PROOF_MANAGER(pm)

def MSAT_ERROR_PROOF(p):
    r"""MSAT_ERROR_PROOF(msat_proof p) -> int"""
    return _mathsat.MSAT_ERROR_PROOF(p)


import sys

if sys.version_info[0] >= 3:
    def _enc(s):
        if isinstance(s, str): s = s.encode('ascii')
        return s
else:
    def _enc(s): return s        


def msat_parse_config(data_or_file):
    if hasattr(data_or_file, 'read'):
        data_or_file = data_or_file.read()
    return _msat_parse_config(data_or_file)

def msat_parse_config_file(f):
    return _msat_parse_config(f.read())

def msat_create_env(conf=None, other=None):
    try:
        if conf is None:
            cfg = msat_create_config()
        elif hasattr(conf, 'items'):
            cfg = msat_create_config()
            for (k, v) in conf.items():
                msat_set_option(cfg, k, v)
        elif hasattr(conf, 'read'):
            cfg = _msat_parse_config(conf.read())
        else:
            try:
                cfg = conf + ""
            except:
                cfg = conf
            else:
                if '=' not in cfg:
                    cfg = msat_create_default_config(cfg)
                else:
                    cfg = msat_parse_config(cfg)
        if other is not None:
            return _msat_create_shared_env(cfg, other)
        else:
            return _msat_create_env(cfg)
    finally:
        if cfg is not conf:
            msat_destroy_config(cfg)

msat_create_shared_env = msat_create_env

def msat_get_function_type(env, param_types, return_type):
    return _msat_get_function_type(env, param_types, len(param_types), return_type)

def msat_model_iterator_next(i):
    "returns a tuple (term, value)"
    t = msat_term()
    v = msat_term()
    _msat_model_iterator_next(i, t, v)
    return (t, v)

def msat_all_sat(env, important, callback):
    return _msat_all_sat(env, important, len(important), callback)

def msat_solve_diversify(env, diversifiers, callback):
    return _msat_solve_diversify(env, diversifiers, len(diversifiers), callback)

def msat_get_asserted_formulas(env):
    return _msat_get_asserted_formulas(env, 0)

def msat_get_unsat_core(env):
    return _msat_get_unsat_core(env, 0)

def msat_get_theory_lemmas(env):
    return _msat_get_theory_lemmas(env, 0)

def msat_solve_with_assumptions(env, assumptions):
    return _msat_solve_with_assumptions(env, assumptions, len(assumptions))

def msat_get_unsat_assumptions(env):
    return _msat_get_unsat_assumptions(env, 0)

def msat_get_interpolant(env, groups_of_a):
    return _msat_get_interpolant(env, groups_of_a, len(groups_of_a))

def msat_from_smtlib1_file(env, fileobj):
    return _msat_from_smtlib1(env, fileobj.read())

def msat_from_smtlib2_file(env, fileobj):
    return _msat_from_smtlib2(env, fileobj.read())

def msat_term_to_number(env, term):
    return _msat_term_to_number(env, term, 0)

def msat_make_int_modular_congruence(env, modulus, t1, t2):
    return _msat_make_int_modular_congruence(env, str(modulus), t1, t2)

def msat_term_is_int_modular_congruence(env, term):
    "returns a tuple (res, number)"
    return _msat_term_is_int_modular_congruence(env, term, 0)


def msat_is_bv_type(env, tp):
    "returns a tuple (res, width)"
    return _msat_is_bv_type(env, tp, None)


def msat_is_array_type(env, tp):
    "returns a tuple (res, indextp, elemtp)"
    return _msat_is_array_type(env, tp, None, None)


def msat_is_fp_type(env, tp):
    "returns a tuple (res, exp_width, mant_width)"
    return _msat_is_fp_type(env, tp, None, None)


def msat_get_enum_type(env, name, domain):
    return _msat_get_enum_type(env, name, len(domain),
                               [_enc(d) for d in domain])


def msat_is_enum_type(env, tp):
    "returns a tuple (res, domain)"
    return _msat_is_enum_type(env, tp, None, None)


def msat_term_is_bv_extract(env, term):
    "returns a tuple (res, msb, lsb)"
    return _msat_term_is_bv_extract(env, term, None, None)


def msat_term_is_bv_zext(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_zext(env, term, None)


def msat_term_is_bv_sext(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_sext(env, term, None)


def msat_term_is_bv_rol(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_rol(env, term, None)


def msat_term_is_bv_ror(env, term):
    "returns a tuple (res, amount)"
    return _msat_term_is_bv_ror(env, term, None)


def msat_named_list_from_smtlib2(env, data):
    ret = _msat_named_list_from_smtlib2(env, data, 0, 0, 0)
    if ret is not None:
        ret = [p[0] for p in ret], [p[1] for p in ret]
    return ret

def msat_named_list_from_smtlib2_file(env, f):
    return msat_named_list_from_smtlib2(env, f.read())


def msat_named_list_to_smtlib2(env, names, terms):
    names = [_enc(n) for n in names]
    return _msat_named_list_to_smtlib2(env, len(names), names, terms)


def msat_named_list_to_smtlib2_file(env, names, terms, out):
    names = [_enc(n) for n in names]
    data = msat_named_list_to_smtlib2(env, names, terms)
    out.write(data)


def msat_annotated_list_from_smtlib2(env, data):
    return _msat_annotated_list_from_smtlib2(env, data, 0, 0, 0)


def msat_annotated_list_from_smtlib2_file(env, f):
    return msat_annotated_list_from_smtlib2(env, f.read())


def msat_annotated_list_to_smtlib2(env, terms, annots):
    annots = [_enc(n) for n in annots]
    return _msat_annotated_list_to_smtlib2(env, len(terms), terms, annots)


def msat_annotated_list_to_smtlib2_file(env, terms, annots, out):
    annots = [_enc(n) for n in annots]
    data = msat_annotated_list_to_smtlib2(env, terms, annots)
    out.write(data)


def msat_gc_env(env, tokeep):
    return _msat_gc_env(env, tokeep, len(tokeep))


# add suitable __eq__, __hash__ and __str__ methods to the msat classes

def _term_hash(self):
    return msat_term_id(self)
msat_term.__hash__ = _term_hash
del _term_hash

def _term_eq(self, other):
    return isinstance(other, msat_term) and msat_term_id(self) == msat_term_id(other)
msat_term.__eq__ = _term_eq
del _term_eq

def _term_str(self):
    if MSAT_ERROR_TERM(self): return "<ERROR>"
    return msat_term_repr(self)
msat_term.__str__ = _term_str
del _term_str

def _decl_hash(self):
    return msat_decl_id(self)
msat_decl.__hash__ = _decl_hash
del _decl_hash

def _decl_eq(self, other):
    return isinstance(other, msat_decl) and msat_decl_id(self) == msat_decl_id(other)
msat_decl.__eq__ = _decl_eq
del _decl_eq

def msat_exist_elim(env, formula, to_elim, algo,
                    toplevel_propagation=True,
                    boolean_simplifications=True,
                    remove_redundant_constraints=True):
    opts = msat_exist_elim_options()
    opts.toplevel_propagation = toplevel_propagation
    opts.boolean_simplifications = boolean_simplifications
    opts.remove_redundant_constraints = remove_redundant_constraints
    return _msat_exist_elim(env, formula, to_elim, len(to_elim), algo, opts)

def msat_exist_elim_model(env, formula, to_elim, model, model_values=None):
    if model_values is None:
        model_vars, model_values = [], []
        for (k, v) in getattr(model, 'iteritems', getattr(model, 'items'))():
            model_vars.append(k)
            model_values.append(v)
    else:
        model_vars = model
    return _msat_exist_elim_model(env, formula, to_elim, len(to_elim),
                                  model_vars, model_values, len(model_vars))

def msat_apply_substitution(env, term, to_subst, values=None):
    if values is None:
        m = to_subst
        to_subst = []
        values = []
        if hasattr(m, 'items'):
            for (k, v) in getattr(m, 'iteritems', m.items)():
                to_subst.append(k)
                values.append(v)
        else:
## assume m is a sequence of (k, v) pairs
            for (k, v) in m:
                to_subst.append(k)
                values.append(v)
    return _msat_apply_substitution(env, term, len(to_subst), to_subst, values)

def msat_simplify(env, formula, to_protect):
    return _msat_simplify(env, formula, to_protect,
                          0 if to_protect is None else len(to_protect))


def msat_aig_encode(mgr, term):
    return _msat_aig_encode(mgr, term, 0)


MSAT_TAG_FP_TO_BV = MSAT_TAG_FP_TO_SBV        

## EXTRA_PYTHON_CODE_TAG




